version: 2
jobs:
  build:
    docker:
      - image: circleci/android:api-27-ndk-r17b
    steps:
      - checkout
      - run:
          name: Setup the Environment using Scripts by Akhilnarang
          command: |
            sudo apt -qy update && sudo apt install apt-transport-https -qy
            mkdir /home/circleci/project/Landroid && cd /home/circleci/project/Landroid
            mkdir toolz && cd toolz
            git clone https://github.com/akhilnarang/scripts
            cd scripts
            bash setup/android_build_env.sh
            cd setup && bash install_android_sdk.bash && cd ..
            cd ../../ && rm -rf toolz
            sudo apt install whiptail wput -qqy
            # Script to setup the Android SDK on a Linux System
            TOOLS_URL="https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip"
            ZIP_NAME=$(printf '%s\n' "${TOOLS_URL##*/}")
            mkdir -p ~/Android/Sdk/; cd ~/Android/Sdk || exit 1
            if axel -a -n 10 "${TOOLS_URL}"; then
                unzip -qqo "${ZIP_NAME}"
            else
                exit 1
            fi
            # Create repositories.cfg if not present
            if [ ! -f ~/.android/repositories.cfg ] ; then
                touch ~/.android/repositories.cfg
            fi
            rm "${ZIP_NAME}"
            printf '\nexport ANDROID_HOME=~/Android/Sdk' >> ~/.bashrc
            source ~/.bashrc
            yes | "${ANDROID_HOME}"/tools/bin/sdkmanager --licenses || not done license accept
            y | "${ANDROID_HOME}"/tools/bin/sdkmanager --update > /dev/null
            y | "${ANDROID_HOME}"/tools/bin/sdkmanager build-tools;27.0.3
            y | "${ANDROID_HOME}"/tools/bin/sdkmanager platform-tools
            y | "${ANDROID_HOME}"/tools/bin/sdkmanager tools
            y | "${ANDROID_HOME}"/tools/bin/sdkmanager platforms;android-27
            sudo apt install whiptail wput -qqy
            echo ">>> Initial Disc Space is" && df -hlT
          no_output_timeout: 5m
      - run:
          name: Git Config and Get LineageOS
          command: |
            cd /home/circleci/project/Landroid
            # Github Authorization
            git config --global user.email $GitHubMail
            git config --global user.name $GitHubName
            git config --global color.ui true
            # Initialize the repo data fetching
            repo init -q -u https://github.com/LineageOS/android.git -b lineage-15.1 --depth 1
            # Add device sources in local_manifest
            # mkdir .repo/local_manifests && curl -o .repo/local_manifests/roomservice.xml https://raw.githubusercontent.com/SahilSonar/local_manifests/lineage-15.1-dev/roomservice.xml 
            # wget -q 'https://gist.githubusercontent.com/rokibhasansagar/c65b9b7f9564bd9d70084c68719b292a/raw/18fff97243a7e4b7de476e47cc569c10ad8d1279/doogee_x5-local_manifest.xml' -P .repo/local_manifests
            # Sync it up!
            sudo repo sync -c -f -q --force-sync --no-clone-bundle --no-tags -j36
            # Device sources
            git clone https://github.com/SahilSonar/android_kernel_lenovo_k5fpr kernel/lenovo/k5fpr -b lineage-15.1-dev
            git clone https://github.com/SahilSonar/android_device_lenovo_k5fpr kernel/lenovo/k5fpr -b oreo
            git clone https://github.com/SahilSonar/android_vendor_lenovo_k5fpr kernel/lenovo/k5fpr -b lineage-15.1-dev
            # Own the files
            sudo chown -R circleci /home/circleci/project/Landroid/*
            # Patch
            cd device/lenovo/k5fpr/patches
            cd system/core
            patch -p1 < ../../device/lenovo/k5fpr/patches/system_core_liblog.patch
            patch -p1 < ../../device/lenovo/k5fpr/patches/system_core_libnetutils.patch
            patch -p1 < ../../device/lenovo/k5fpr/patches/system_core_software_gatekeeper.patch
            cd ../..
            cd frameworks/native
            patch -p1 < ../../device/lenovo/k5fpr/patches/frameworks_native_ui.patch
            cd ../..
            cd framework/base
            patch -p1 < ../../device/lenovo/k5fpr/patches/frameworks_base_core_whitelist_proc_ged.patch
            cd ../..
            cd hardware/ril
            patch -p1 < ../../device/lenovo/k5fpr/patches/hardware_ril_provides_rild.patch
            cd ../..
            cd hardware/interfaces
            patch -p1 < ../../device/lenovo/k5fpr/patches/camera_device_1_0.patch
            cd ../..
            cd ../../../..
            cd /home/circleci/project/Landroid
            # How much space is taken?
            echo ">>> How much space taken by .repo?" && du -sh .repo/
            echo ">>> How much space taken by checked-out files?" && du -sh /home/circleci/project/Landroid
            echo ">>> Primary Disc Space is now --- " && df -hlT
            ls -la .
          no_output_timeout: 3m
      - run:
          name: Set 40 Gigs of CCache
          command: |
            cd /home/circleci/project/Landroid
            export 'USE_CCACHE=1' >> ~/.bashrc
            export 'CCACHE_COMPRESS=1' >> ~/.bashrc
            . ~/.bashrc
            /usr/local/bin/ccache -M 40G
            /usr/local/bin/ccache -C
      - run:
          name: Build the LineageOS
          command: |
            cd /home/circleci/project/Landroid
            echo "Environment Setup"
            . build/envsetup.sh > /dev/null
            echo "Lunching --- "
            lunch lineage_k5fpr-userdebug
            sleep 2
            echo "Brunching, Umm.. --- "
            brunch lineage_k5fpr-userdebug
          no_output_timeout: 15m
      - run:
          name: Upload Resulting Files
          command: |
            cd /home/circleci/project/Landroid
            cd out/target/product/k5fpr/
            # list all the files
            ls -la */
            # upload
            for file in *; do wput $file ftp://"$FTPUser":"$FTPPass"@"$FTPHost"//TestLAndroid/Lenovo_k5fpr/ ; done
          no_output_timeout: 5m
