version: 2
jobs:
  build:
    docker:
      - image: circleci/android:api-27-ndk
    steps:
      - checkout
      - run:
          name: Setup the Environment using Scripts by Akhilnarang
          command: |
            mkdir /home/circleci/project/Landroid
            cd /home/circleci/project/Landroid
            LATEST_MAKE_VERSION="4.2.1"
            sudo apt update -qy
            sudo apt install -qqy libssl-dev openjdk-8-jre openjdk-8-jdk \
            git curl libesd0-dev schedtool figlet libesd0-dev flex gperf libsdl1.2-dev squashfs-tools \
            pngcrush schedtool libxml2 libxml2-utils xsltproc lzop lib32z1-dev lib32ncurses5-dev pngquant \
            ncurses-dev texinfo gperf libtool automake gawk subversion expat python-all-dev bc libcloog-isl-dev libcap-dev \
            autoconf libgmp-dev pkg-config libmpc-dev libmpfr-dev lzma* w3m adb fastboot maven ncftp htop imagemagick \
            clang cmake axel re2c whiptail wput
            sleep 5
            if [[ "$(command -v make)" ]]; then
                makeversion="$(make -v | head -1 | awk '{print $3}')"
                if [[ "${makeversion}" != "${LATEST_MAKE_VERSION}" ]]; then
                    echo "Installing make ${LATEST_MAKE_VERSION} instead of ${makeversion}"
                    cd /tmp || exit 1
                    axel -k -a -n 10 https://ftp.gnu.org/gnu/make/make-"${LATEST_MAKE_VERSION}".tar.gz || axel -k -a -n 10 https://mirror.its.dal.ca/gnu/make/make-"${LATEST_MAKE_VERSION}".tar.gz
                    tar xzf /tmp/make-"${LATEST_MAKE_VERSION}".tar.gz
                    cd /tmp/make-"${LATEST_MAKE_VERSION}" || exit 1
                    ./configure
                    curl https://raw.githubusercontent.com/akhilnarang/scripts/master/patches/make-glibc_alloc_fix.patch | patch -p1
                    bash ./build.sh
                    sudo install ./make /usr/local/bin/make
                fi
            cd /tmp || exit 1
            rm -rf /tmp/make-"${LATEST_MAKE_VERSION}"{,.tar.gz}
            fi
            echo "Installing repo"
            sudo curl --create-dirs -L -o /usr/local/bin/repo -O -L https://github.com/akhilnarang/repo/raw/master/repo
            sudo chmod a+x /usr/local/bin/repo
            echo "Installing CCache"
            cd /tmp || exit 1
            git clone git://github.com/akhilnarang/ccache.git
            cd ccache || exit 1
            ./autogen.sh
            ./configure --disable-man
            make -j"$(nproc)"
            sudo make install
            export 'USE_CCACHE=1' >> ~/.bashrc
            export 'CCACHE_COMPRESS=1' >> ~/.bashrc
            . ~/.bashrc
            /usr/local/bin/ccache -M 30G
            /usr/local/bin/ccache -C
            echo "Installing Ninja"
            cd /tmp || exit 1
            git clone git://github.com/akhilnarang/ninja.git
            cd ninja || exit 1
            ./configure.py --bootstrap
            sudo install ./ninja /usr/local/bin/ninja
            cd /tmp || exit 1
            rm -rf ccache ninja
            sleep 2
            # Script to setup the New Android SDK on a Linux System
            TOOLS_URL="https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip"
            ZIP_NAME=$(printf '%s\n' "${TOOLS_URL##*/}")
            rm -rf /opt/android/sdk/*
            sudo mkdir -p /opt/android/sdk || echo "'/opt/android/sdk' dir is already there"
            cd /opt/android/sdk
            if axel -a -n 10 "${TOOLS_URL}"; then
                unzip -qqo "${ZIP_NAME}"
            else
                exit 1
            fi
            # Create repositories.cfg if not present
            if [ ! -f ~/.android/repositories.cfg ] ; then
                touch ~/.android/repositories.cfg
                echo '### User Sources for Android SDK Manager' > ~/.android/repositories.cfg
            fi
            rm "${ZIP_NAME}"
            echo "ANDROID_HOME ENV is --" && echo ${ANDROID_HOME}
            source ~/.bashrc
            sleep 2
            echo "The PATH ENV is --" && echo $PATH && echo ""
            yes | "${ANDROID_HOME}"/tools/bin/sdkmanager --licenses && yes | "${ANDROID_HOME}"/tools/bin/sdkmanager --update
            "${ANDROID_HOME}"/tools/bin/sdkmanager 'build-tools;27.0.3' 'platform-tools' 'tools' 'platforms;android-27' || echo "sdkman installs failed!"
            sleep 2
            echo ">>> Initial Disc Space is" && df -hlT
          no_output_timeout: 8m
      - run:
          name: Git Config and Get LineageOS
          command: |
            cd /home/circleci/project/Landroid
            # Github Authorization
            git config --global user.email $GitHubMail
            git config --global user.name $GitHubName
            git config --global color.ui true
            # Initialize the repo data fetching
            repo init -q -u https://github.com/LineageOS/android.git -b lineage-15.1
            # Sync it up!
            sudo repo sync -c -f -q --force-sync --no-clone-bundle --no-tags -j36
            sleep 2
            # Own All Source Files
            sudo chown -fR circleci:circleci *
            sudo chown -fR circleci:circleci .repo
            sleep 2
            # Basic cleanup
            echo "The size of Repo is --" && du -sh .repo
            rm -rf .repo/
            # Space taken by Files
            du -sh *
      - run:
          name: Get Device Sources
          command: |
            cd /home/circleci/project/Landroid
            sudo git clone https://github.com/mohancm/android_kernel_lenovo_A7010a48 kernel/lenovo/k5fpr -b LineageOS-15.0
            sudo git clone https://github.com/SahilSonar/android_device_lenovo_k5fpr device/lenovo/k5fpr -b lineage-15.1
            sudo git clone https://github.com/SahilSonar/android_vendor_lenovo_k5fpr vendor/lenovo/k5fpr -b lineage-15.1
            # Own the files, again
            sudo chown -fR circleci:circleci kernel
            sudo chown -fR circleci:circleci device
            sudo chown -fR circleci:circleci vendor
            # Apply Patchs
            cd device/lenovo/k5fpr/patches/
            chmod +x *.sh
            bash apply.sh
            cd ../../../..
            # Show How much space is taken Again
            echo ">>> How much space taken by checked-out files?" && du -sh /home/circleci/project/Landroid
            echo ">>> Primary Disc Space is now --- " && df -hlT
            ls -la .
          no_output_timeout: 8m
      - run:
          name: Build the LineageOS
          command: |
            cd /home/circleci/project/Landroid
            export ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx2G"
            echo "Environment Setup"
            . build/envsetup.sh > /dev/null
            echo "Lunching --- "
            lunch lineage_k5fpr-userdebug
            sleep 2
            echo "Brunching, Umm.. --- "
            brunch lineage_k5fpr-userdebug
            sleep 2
          no_output_timeout: 25m
      - run:
          name: Upload Resulting Files
          command: |
            cd /home/circleci/project/Landroid
            cd out/target/product/k5fpr/
            # list all the files
            ls -la */
            # upload
            for file in *; do wput $file ftp://"$FTPUser":"$FTPPass"@"$FTPHost"//TestLAndroid/Lenovo_k5fpr/ ; done
          no_output_timeout: 5m
